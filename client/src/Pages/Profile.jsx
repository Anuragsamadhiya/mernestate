import React, { useState,useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux';
import {useRef} from "react"
import toast from 'react-hot-toast';
import {Link} from 'react-router-dom';
import { getDownloadURL, getStorage, uploadBytesResumable } from 'firebase/storage';
import { app } from '../Googlefirbase.js';
import { ref } from 'firebase/storage';
import { FaEye } from 'react-icons/fa';
import { updateuserfail,updateusersuccess,deleteuserfail,deleteusersuccess} from '../redux/user/useSlice.js';
//Ek baar ye chatgpt pe daal laina handlefileupload function FireBase smj laina mtlb revise krlaina
export default function Profile() {
  const fileref=useRef(null)
  const { currentUser } = useSelector((state) => state.user);
  const[file,setfile]=useState(undefined)
  const[fileperc,setfileprc]=useState(0);
  const [c, setC] = useState('yes');

  const[filuploaderror,setfileuploaderror]=useState(false)
  const[formdata,setformdata]=useState({})
  const[currentlisting,setcurrentlisting]=useState([])
  const dispatch=useDispatch()
  // Firebase image upload rules
  // allow read;
  // allow write: if
  // request.resource.size<2*1024*1024 &&
  // request.resource.contentType.matches('image/.*');
  useEffect(()=>{
if(file){
  handlefileupload(file)
}
  },[file])

  //This handlefileupload function if fully based on Firebase functions all are Firebase functions ,,, firbase storage used everything is of Firebase
  // jo initalize kia hai firebase app Googlefirebase me usime storagebucket bhi hai jo yha use horhi hai
  const handlefileupload=(file)=>{
const storage=getStorage(app) //Firebase provides the getStorage function, which initializes and returns a reference to the Firebase Storage service associated with the given Firebase app (app). This sets up the connection to Firebase's cloud storage.    This line initializes the storage reference using the Firebase app instance (app).
const filname=new Date().getTime()+file.name; //A unique filename is generated by combining the current timestamp with the original file name to avoid conflicts.
const storageRef=ref(storage,filname);//A reference to the storage location where the file will be uploaded is created.
const uploadtask=uploadBytesResumable(storageRef,file)//uploadBytesResumable(storageRef, file) starts the upload of the file to Firebase Storage.
uploadtask.on('state_changed', //  // Monitor the upload process
  (snapshot)=>{
    const progress=(snapshot.bytesTransferred/snapshot.totalBytes)*100; 
    setfileprc(Math.round(progress))
  },
  (error)=>{
    setfileuploaderror(true);
  },
  ()=>{  //      // Get the download URL of the uploaded file after the upload is complete   // Update the form data state with the download URL
  getDownloadURL(uploadtask.snapshot.ref).then((downloadURl)=>setformdata({...formdata,avatar:downloadURl}))}
 );};


 const handlechange=(e)=>{
  setformdata({...formdata,[e.target.id]:e.target.value})   //chnging state with the value entered in username,email....
 }
 const handlesubmit=async(e)=>{
e.preventDefault();
console.log('Form data email:', formdata.email);

if(document.getElementById('username').value==='' || document.getElementById('email').value==='') {
  toast.error("Crdentials cant be empty");
  return;
}

try {
  const res = await fetch(`https://mern-estate-4rhd.onrender.com/api/auth/updateuser/${currentUser._id}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
     credentials: 'include',
    body: JSON.stringify(formdata), //formdata state contain all updated values 
  });
  const data = await res.json();
  console.log(data)
  if (data.succes === false) {
    toast.error(data.message)
    dispatch(updateuserfail(data.message));
    return;
  }
  toast.success("Updated Succefully")
dispatch(updateusersuccess(data))
} catch (error) {
  toast.error(error.message)

  dispatch(updateuserfail(error.message))
}
 };

 const handledelete=async(req,res)=>{
  try {
    const res = await fetch(`https://mern-estate-4rhd.onrender.com/api/auth/deleteuser/${currentUser._id}`, {
      method: 'DELETE',
      credentials: 'include',
  }
  );
  const data = await res.json();
  if (data.succes === false) {
    toast.error(data.message)
    dispatch(deleteuserfail(data.message));
    return;
  }
  toast.success("Account Deleted Succefully")
 dispatch(deleteusersuccess(data))
 }
 catch(error){
  dispatch(deleteuserfail(error.message));

 }
};

const handlesignout=async()=>{
  try {
    const res = await fetch("https://mern-estate-4rhd.onrender.com/api/user/signout", {
      method: 'GET',
      credentials:"include",
  }
  );
  const data = await res.json();
  if (data.succes === false) {
    toast.error(data.message)
    dispatch(deleteuserfail(data.message));
    return;
  }
  toast.success("Signing Out!")

  dispatch(deleteusersuccess(data));

}
catch(error){
  dispatch(deleteuserfail(error.message));

}
}
const showlisting=async()=>{
  if(c==='no'){
    setC('yes');
    setcurrentlisting([]);
    return
  }
  try {
    const res=await fetch(`https://mern-estate-4rhd.onrender.com/api/auth/listing/${currentUser._id}`,
     {credentials:"include",}
    )
    const data=await res.json();
    if(data.succes==false){
      toast.error("Failed getting listing")
      return;
    }
    setcurrentlisting(data);
    setC('no')
  } catch (error) {
    toast.error("Failed getting listing")

  }
}
const handlelistingdelete=async(listingid)=>{
  try{
const res=await fetch(`https://mern-estate-4rhd.onrender.com/api/listing/deletelisting/${listingid}`,{
  method:'DELETE',
  credentials:'include',
})
const data=res.json();
if(data.succes==false){
  toast.error("Failed deleting listing")
  return;
}
setcurrentlisting((prev)=>prev.filter((listing)=>listing._id!==listingid));

  }
  
catch(error){
console.log(error)
}
}
  return (
    <div className='w-[23rem] md:w-[32rem] flex-col  mx-auto'>
      <h1 className='text-center font-bold text-4xl my-7'>Profile</h1>
      <form  className='flex flex-col space-y-3' onSubmit={handlesubmit}>
        <input type="file" onChange={(e)=>{setfile(e.target.files[0])}} ref={fileref} hidden accept='image/*' />

  <img
          onClick={() => fileref.current.click()}
          src={formdata.avatar || currentUser.avatar}
          alt='profile'
          className='rounded-full h-24 w-24 object-cover cursor-pointer self-center mt-2'
        />
        <p className='text-sm self-center'>
          {filuploaderror ? (
            <span className='text-red-700'>
              Error Image upload (image must be less than 2 mb)
            </span>
          ) : fileperc > 0 && fileperc < 100 ? (
            <span className='text-slate-700'>{`Uploading ${fileperc}%`}</span>
          ) : fileperc === 100 ? (
            <span className='text-green-700'>Image successfully uploaded!</span>
          ) : (
            ''
          )}
        </p>
      <input type="text" placeholder='username'   id='username' onChange={handlechange} className='rounded-lg p-3' defaultValue={currentUser.username}/>
      <input type="email" placeholder='email'   id='email' onChange={handlechange} className='rounded-lg p-3' defaultValue={currentUser.email}/>
      <input type="password" placeholder='password'  id='password' onChange={handlechange}  className='rounded-lg p-3'/>
      <button className='text-white bg-slate-700 p-2 rounded-lg hover:opacity-85 uppercase' type='submit'>Update Details</button>
      <Link to='/CreateListings' className="bg-green-400 text-white rounded-lg hover:opacity-85 uppercase p-2 text-center">Add Listing</Link>
      </form>
      <div className='flex justify-between  mt-5'>
        <p className='text-red-700 cursor-pointer' onClick={handledelete}>Delete Account</p>
        <p className='text-red-700 cursor-pointer ' onClick={handlesignout}>Sign Out</p>
      </div>
      <div className='text-center mt-12'>
      <button className="text-white bg-green-700 p-2 w-1/2 rounded-lg  hover:opacity-85 " onClick={showlisting}  type="radio" name="my-accordion-2">{c=='yes'?'Show My Listing':'Hide My Listing'}</button>
      </div>
     {
     
      currentlisting && currentlisting.length>0 && 
      <div className='flex flex-col mt-10  '>
        <h1 className='text-2xl font-semibold text-center'>Your listings</h1>
      {currentlisting.map((listing)=>(
<div className='flex items-center justify-between gap-3 border my-4 md:-mx-72 -mx-4 ' key={listing._id}>
  <Link to={`/listing/${listing._id}`}>
  <img src={listing.imageUrl[0]} alt="listing cover" className='md:h-1/2 md:w-2/3 object-contain' />
  </Link>
  <Link to={`/listing/${listing._id}`} className=' text-blue-600 md:text-xl hover:underline'>
  <FaEye className=''></FaEye>view</Link>


  <Link to={`/listing/${listing._id}`} className=''>
<p className='text-xl text-slate-600 hover:underline truncate font-serif'>{listing.name}</p> 
 </Link>
 <div className='flex flex-col gap-2 text-center mr-2'>
  <p className='text-red-500 cursor-pointer font-bold' onClick={()=>handlelistingdelete(listing._id)}>Delete</p>
  <Link to={`/UpdateListings/${listing._id}`}><p className='text-blue-700 cursor-pointer font-bold' >Edit</p> </Link>
 </div>
</div>
      ))}
      </div>
     }
    </div>
  )
}
